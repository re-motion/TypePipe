// Copyright (c) rubicon IT GmbH, www.rubicon.eu
//
// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.  rubicon licenses this file to you under 
// the Apache License, Version 2.0 (the "License"); you may not use this 
// file except in compliance with the License.  You may obtain a copy of the 
// License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
// License for the specific language governing permissions and limitations
// under the License.
// 
using System;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using Remotion.TypePipe.Caching;
using Remotion.TypePipe.CodeGeneration;
using Remotion.TypePipe.MutableReflection;
using Remotion.TypePipe.TypeAssembly.Implementation;
using Remotion.Utilities;

namespace Remotion.TypePipe.Implementation
{
  /// <summary>
  /// Manages the code generated by the pipeline by delegating to the contained <see cref="IGeneratedCodeFlusher"/> and
  /// <see cref="ITypeCache"/> instance.
  /// </summary>
  /// <threadsafety static="true" instance="true"/>
  public class CodeManager : ICodeManager
  {
    private readonly IAssemblyContextPool _assemblyContextPool;
    private readonly ITypeCache _typeCache;
    private readonly ITypeAssembler _typeAssembler;

    public CodeManager (ITypeCache typeCache, ITypeAssembler typeAssembler, IAssemblyContextPool assemblyContextPool)
    {
      ArgumentUtility.CheckNotNull ("assemblyContextPool", assemblyContextPool);
      ArgumentUtility.CheckNotNull ("typeAssembler", typeAssembler);
      ArgumentUtility.CheckNotNull ("typeCache", typeCache);

      _typeCache = typeCache;
      _typeAssembler = typeAssembler;
      _assemblyContextPool = assemblyContextPool;
    }

    public string[] FlushCodeToDisk (params CustomAttributeDeclaration[] assemblyAttributes)
    {
      ArgumentUtility.CheckNotNull ("assemblyAttributes", assemblyAttributes);

      AssemblyContext[] assemblyContexts = _assemblyContextPool.DequeueAll();
      try
      {
        return assemblyContexts
            .AsParallel()
            .Select (assemblyContext => FlushCodeToDisk (assemblyAttributes, assemblyContext))
            .Where (path => path != null)
            .ToArray();
      }
      finally
      {
        foreach (var assemblyContext in assemblyContexts)
          _assemblyContextPool.Enqueue (assemblyContext);
      }
    }

    private string FlushCodeToDisk (CustomAttributeDeclaration[] assemblyAttributes, AssemblyContext assemblyContext)
    {
      var assemblyPath = assemblyContext.GeneratedCodeFlusher.FlushCodeToDisk (assemblyAttributes);
      assemblyContext.ResetParticipantState();
      return assemblyPath;
    }

    public void LoadFlushedCode (Assembly assembly)
    {
      ArgumentUtility.CheckNotNull ("assembly", assembly);

      var typePipeAttribute = 
          (TypePipeAssemblyAttribute) assembly.GetCustomAttributes (typeof (TypePipeAssemblyAttribute), inherit: false).SingleOrDefault();
      if (typePipeAttribute == null)
        throw new ArgumentException ("The specified assembly was not generated by the pipeline.", "assembly");

      if (typePipeAttribute.ParticipantConfigurationID != _typeAssembler.ParticipantConfigurationID)
      {
        var message = string.Format (
            "The specified assembly was generated with a different participant configuration: '{0}'.",
            typePipeAttribute.ParticipantConfigurationID);
        throw new ArgumentException (message, "assembly");
      }

      _typeCache.LoadTypes (assembly.GetTypes());
    }
  }
}